//@aux-build:proc_macros.rs

#![warn(clippy::needless_continue)]
#![allow(while_true, clippy::empty_loop)]
use proc_macros::{external, inline_macros, with_span};

#[inline_macros]
fn main() {
    loop { //~ needless_continue
    }

    while true {
        let _ = 1 + 1; //~ needless_continue
    }

    for _ in 0..1 {
        let _ = match 0 {
            0 => 0,
            1 => 1,
            _ => 2,
        }; //~ needless_continue
    }

    loop {
        if true { //~ needless_continue
        }
    }

    loop {
        if true { //~ needless_continue
        } else {
            println!();
        }
    }

    loop {
        if true {
            println!();
        } else { //~ needless_continue
        }
    }

    loop {
        match 0 {
            0 => break,
            1 => {}, //~ needless_continue
            _ => {},
        }
    }

    loop {
        if true {
            continue;
        }
        match 0 {
            0 => match 0 {
                0 => {}, //~ needless_continue
                1 => {
                    if true { //~ needless_continue
                    } else {
                        break;
                    }
                },
                _ => {},
            },
            1 => {
                let _ = 1; //~ needless_continue
            },
            _ => break,
        }
    }

    'outer: loop {
        'inner: loop {
            match 0 {
                0 => continue 'outer,
                1 => {}, //~ needless_continue
                _ => {},        //~ needless_continue
            }
        }
    }

    'outer: loop {
        loop {
            match 0 {
                0 => continue 'outer,
                1 => {}, //~ needless_continue
                _ => break,
            }
        }
    }

    external! {
        loop {
            continue;
        }
    }

    with_span! {
        span
        loop {
            continue;
        }
    }

    inline! {
        loop { //~ needless_continue
        }

        loop $(@block {
            continue;
        })

        loop {
            $(@stmt continue)
        }

        loop {
            $(@expr continue);
        }

        loop {
            if true $(@block {
                continue;
            })
        }

        loop {
            if true {
                $(@stmt continue)
            } else { //~ needless_continue
            }
        }

        loop {
            $(@stmt match 0 {
                0 => continue,
                1 => break,
                _ => {},
            })
        }
    }
}
